---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
    pod-security.kubernetes.io/enforce: privileged
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRTmdBUlQvOTYyYjN2NEpOSlp6bFRlREFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEkxTURNd05qRTBNalEwTVZvWApEVEkyTURNd05qRTBNalEwTVZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTGVTVXhUQlcxdGUrdlZxUng3ekRQRFIKdUJCUGUwaVhOaEl5ay9PeUZGVjlIb3NieHFUUEF0QXkvcnh5NVJCRU1MQmpSSmVlNTFyMlFrSGZvcXNMcGtKSQpCMExFQjAremtzdTcvMUNNM2xMdGkwSUgvTnVmVE9DaVAvMThuSDZNRWpUTUp4TzM0UXk0WkY4MjBwcTRYNXhSCmlBd0lybG1wcFdYMnN2NUE5VVN5UFB5NkpxcE5vbXhBeTIxMHBDS3hiZUprbXYzM3BscGk0dkh2Tmc0Y1VueSsKNWZkdEhlOTIzNU8rSE9HekNGSm5kdVVpVGF0RzVudjM3Ui9KVFFnRXlSTTVGeWhwazk2RW43SHkwcGFGTXpSRwpqQzFrVlZHTDJ4Y05Dd0hnWTBsNENFTWhuallNbDV2T0EveHM2bU9kYmdKMldnSUR2ZTdEbFdYYXBINUFrYnNDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFKbTArTC9VUXA2Lzc2NkllaFVXdk5HLzE2L3RJai9xCnZjKytKNzVSZjNwSzJhQ0FtYVg0aDFHZ3VucElxSlpPWlBnbUJ1TmZyTWdMaVBNYlJCMWRLUXd6dWc0cVA1V0MKaHArQ1YwL0x1SHdFMWh5UFdhTjRoMjBDcW9TeXRsNGFqWG03Zkh6TWZ2NVI5VjFnY25EcnIzY1JEVjQ0UGhrQwpMcEZzMGFKeGRWT0tzRTYvb09WQXpqS3lpaGhDMlNvekc0TVNmYWxNSlFPM0xjVFo5SEhBT0Y2L3g3cVNWbTh5CmdZTlNjc3l1aFZxN2EwK1p4WUFjYjNidGxlZ3p1Q3BETUY0eXVVbmMxTjMrUWZtQWlwUUUyYlBqczNieXRXcngKNTRiWjU1VXppRkNZbEhHVHRWUlE2aXN1WnpUQ0d0UmYveXMxQjk1b0RhMmtRVG1YV3QyZTJWZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdDVKVEZNRmJXMTc2OVdwSEh2TU04Tkc0RUU5N1NKYzJFaktUODdJVVZYMGVpeHZHCnBNOEMwREwrdkhMbEVFUXdzR05FbDU3bld2WkNRZCtpcXd1bVFrZ0hRc1FIVDdPU3k3di9VSXplVXUyTFFnZjgKMjU5TTRLSS8vWHljZm93U05Nd25FN2ZoRExoa1h6YlNtcmhmbkZHSURBaXVXYW1sWmZheS9rRDFSTEk4L0xvbQpxazJpYkVETGJYU2tJckZ0NG1TYS9mZW1XbUxpOGU4MkRoeFNmTDdsOTIwZDczYmZrNzRjNGJNSVVtZDI1U0pOCnEwYm1lL2Z0SDhsTkNBVEpFemtYS0dtVDNvU2ZzZkxTbG9Vek5FYU1MV1JWVVl2YkZ3MExBZUJqU1hnSVF5R2UKTmd5WG04NEQvR3pxWTUxdUFuWmFBZ085N3NPVlpkcWtma0NSdXdJREFRQUJBb0lCQVFDZUtSc2R5YzQ5ZGlNQQo2VlZuaS84OVNXT3Q0ZDBWV1ByRVNRR0NPSThlYk5PeEJQaHNMTk4rc0VFYitsM3pXdDBjVEJyZ0M0L0hwbDdGCnhMbXhaek1TN2w0Ykh5d3hka1ZtOVkzdlI3K1JjWXJIRkh5K2VJelRDZGZhUGMvVGxEbG5kZkhCSW05cTl6KzcKYlUrYzhIZW9CZk1TY3pSTW1rYWdDQ0tGdjAvU284eTYyWkhvRTBORnpKdHR5bloxd3UwV3BtWDVqQzFXdkRMSApmMlFoUUV6RFdMb093NWVsR1hQTjJTRFZ0YThTbk9wS1BoY3NRT3I5SGNSYmFVdjBXWFRJREY2SlZFZyt5QWVlCmtsQ1BVN2VSeHFsMXhqc2s3Tm5XMHF4MHVxMDRPSmEyU2VnbTlYYlk4dFp2eXZmcG9RRTVGekdkaXNGazVwbDAKRHFBTTRSdFpBb0dCQU01NDVXeitVeGNzTjNVcDBrTFpSMXBxNG95QU90c1NZZVhlRExUMSt1clRDN25xTkNoSwpQanRrT1J4V2gwUkZLL1VrNmYzRnZuWGtGQSsyb3JkYnBWaUV2Yk5KVmdQbVZsM3JEVWpNc1FzRFVlTFpwR1I5ClZWdDRhN0VrVUdqZ2VoSGFocitYYUZQZWhQdDlEdm90U3JlaHBCVmk1QzlDUEdiZEU0bklNMzF2QW9HQkFPT2IKSTBVR0VyK01DcFV0ZkwxTFdUbUMvN3dZTGhrc0NxWFNaeENPNzdFamt5WHNuZnZrODhLUjFieVM2OTlLRC9BSQp6ZGtTM2FmYS9iM1hXYk9PbmFFRUVLQS94enp6ZWxoNFoxQUhsaTlwUzhTV09JLzM4WktQQ1VsbXlBQ1paVVBhCjhJbTNWc0t1OUpiNlUyaGVTZXdObitQWEVxK3E5c1AvR3NVd0tLSjFBb0dCQUt1Z3lTMHh0MFlDNWxLSkloT1oKWTN1Z2I1TlZJQmRzajE0eGx5UnhlRkxzZmNuY0NlRVgzZVVtcVdhSjhzVG9MdU1HL1U2S3FvaDZ2OFpVRGF3WApEVG1vbGJ2TGtTbUt0VzQ2YmY5K3p3Z1ZpV0xsZ1laYXZMSmRSaitvclFLUTNrZXErK21VNVE4YVlEWmd2U3R1CnJMWTZNaGZvN1Q3dmN5QWFVeHhzQTRrWEFvR0FJN2ovcWgrdjVaeG5OTTYwMjBqdU1oYWJhTHdxMEF5WGh6c2sKcmZhaExCNDNSQ2FGRFRuOEFEZS9ZaDkxSWRDUCs4NkY4R0lEcEFxODlJVE9NVjVhNHlDdU0xaVBQc1BBR2c2Ygp1SFhZWG95YU5icVdHaEtDT2N4MVdxM2xDaU1KUDhNbktaWTY2Y2RuNENKZDRPMmJrSTc2MzFtc055SVFKT2J2CkhxL1dVTmtDZ1lBcW1hZWlRMExOTlc4QVpvbnpHNTZSUzhFSWRMS1JCV21zalhhT04vWmZTMlc0eDdaRDVqclIKODhMditnQTdpT0VrczRSOTBCdjBQbW9qdWRGOTFmRWkya09DZmpCcDFPdmptVHhqL3RGS2RhUnhIY1R6QnhOVgpaWlE3d0ZlOGx0MnRMcld6eXdaUWZyRDFPMVd5dDgxVkJUQXFYWWtJMzAwQU5Nd1hjVTRSd0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRTmdBUlQvOTYyYjN2NEpOSlp6bFRlREFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEkxTURNd05qRTBNalEwTVZvWApEVEkyTURNd05qRTBNalEwTVZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTGVTVXhUQlcxdGUrdlZxUng3ekRQRFIKdUJCUGUwaVhOaEl5ay9PeUZGVjlIb3NieHFUUEF0QXkvcnh5NVJCRU1MQmpSSmVlNTFyMlFrSGZvcXNMcGtKSQpCMExFQjAremtzdTcvMUNNM2xMdGkwSUgvTnVmVE9DaVAvMThuSDZNRWpUTUp4TzM0UXk0WkY4MjBwcTRYNXhSCmlBd0lybG1wcFdYMnN2NUE5VVN5UFB5NkpxcE5vbXhBeTIxMHBDS3hiZUprbXYzM3BscGk0dkh2Tmc0Y1VueSsKNWZkdEhlOTIzNU8rSE9HekNGSm5kdVVpVGF0RzVudjM3Ui9KVFFnRXlSTTVGeWhwazk2RW43SHkwcGFGTXpSRwpqQzFrVlZHTDJ4Y05Dd0hnWTBsNENFTWhuallNbDV2T0EveHM2bU9kYmdKMldnSUR2ZTdEbFdYYXBINUFrYnNDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFKbTArTC9VUXA2Lzc2NkllaFVXdk5HLzE2L3RJai9xCnZjKytKNzVSZjNwSzJhQ0FtYVg0aDFHZ3VucElxSlpPWlBnbUJ1TmZyTWdMaVBNYlJCMWRLUXd6dWc0cVA1V0MKaHArQ1YwL0x1SHdFMWh5UFdhTjRoMjBDcW9TeXRsNGFqWG03Zkh6TWZ2NVI5VjFnY25EcnIzY1JEVjQ0UGhrQwpMcEZzMGFKeGRWT0tzRTYvb09WQXpqS3lpaGhDMlNvekc0TVNmYWxNSlFPM0xjVFo5SEhBT0Y2L3g3cVNWbTh5CmdZTlNjc3l1aFZxN2EwK1p4WUFjYjNidGxlZ3p1Q3BETUY0eXVVbmMxTjMrUWZtQWlwUUUyYlBqczNieXRXcngKNTRiWjU1VXppRkNZbEhHVHRWUlE2aXN1WnpUQ0d0UmYveXMxQjk1b0RhMmtRVG1YV3QyZTJWZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.48.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      securityContext:
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: prometheus-admin
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: metrics-api
      namespace: linkerd-viz
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: fb4a2a8244513e21ec9c915f7da47431d36ad2e25b8fc87b0c3787d18726f048
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRZXlUNVhJRHJSQnEyTG11bE1KMWNaREFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEkxTURNdwpOakUwTWpRME1Wb1hEVEkyTURNd05qRTBNalEwTVZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUw1aFN0cHV1VXhKcFdOUXVSTHAwTzVGd1NKZGhPZ3dSSXlZVHljVFlPR0Fta3YwVEprODJ0RGF3ZjRZS3M2RQpkc2tPY3EwWjJZeENEK2xsaHQ1bWd3VkxxM1NpUVc1VGlrY3IvRWxFSXVuNnRUTzIxK3p1UVk5MUFnSzJ0eS9WClU4bGIrUE1tVWR2Tm1JT1NDUENoYXFFa0JQSzBKVURINUZCOG9acmlxNEZ1MUxnQm10MDZpeFBKdE5mMFI5Z00KcFBRSjlKRkJxclhWU1ExY1loOGt6cDhmYzBIbVVrZHhFK0szU2pKNCtZSkNRTFZ2R3FHUjAvMkYwK2JyUW9iNQp3MTY2RWNONUU2NXduYVl1bThnR1FWM1IxVkx1ZTRMU2xXd3l0YUJqanJDVE53Zzc0QVE5WVpCYmUxQTFCZXFPCkRNcXkyM0xOUW1UdGM3N2hNUGkwQlVjQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSzlzOGVoT05IVVF1K3RrcjJ5MzhrL21TQThSb1loSHhmbFBjamEwdGk5cC9ZM05KcTdrMEdQTm1lOTQKUGlYWFl1SzhnWks4YW15ZXpRVXNzcHEwUlpvNVczM3M3bk1QU2NuZXhEVlUzanFmV0lVd1EwWmxlNk01SS9WRwpUcWVXUVBmYWdVVUd0aXVoTnlXNDZoQVVPdWVjVGtxRk80YWdFM21MeVh3b3FFV3E1Y2drUHNHelNibUpYZnVuCnk1a0cwaFZBM2Nxdmh5NzV1RC9neUJMb2FzOXNqOThRZmVhUE5qTjloWHAzUGczemdoVGdoL2hRME83UUJUdjcKWlo5allTUWFTdXRudXVWSUZXb3pVbGk1MUhTZ3V0VGZUNVlGUGJIN2NqYWZuWWNZSGJaeFJDSm12dDJNS0JFdwpqemlXMVlQVDdCRUJ1MTd6Y3I3b0dad2hvWGM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdm1GSzJtNjVURW1sWTFDNUV1blE3a1hCSWwyRTZEQkVqSmhQSnhOZzRZQ2FTL1JNCm1UemEwTnJCL2hncXpvUjJ5UTV5clJuWmpFSVA2V1dHM21hREJVdXJkS0pCYmxPS1J5djhTVVFpNmZxMU03YlgKN081QmozVUNBcmEzTDlWVHlWdjQ4eVpSMjgyWWc1SUk4S0Zxb1NRRThyUWxRTWZrVUh5aG11S3JnVzdVdUFHYQozVHFMRThtMDEvUkgyQXlrOUFuMGtVR3F0ZFZKRFZ4aUh5VE9ueDl6UWVaU1IzRVQ0cmRLTW5qNWdrSkF0VzhhCm9aSFQvWVhUNXV0Q2h2bkRYcm9SdzNrVHJuQ2RwaTZieUFaQlhkSFZVdTU3Z3RLVmJESzFvR09Pc0pNM0NEdmcKQkQxaGtGdDdVRFVGNm80TXlyTGJjczFDWk8xenZ1RXcrTFFGUndJREFRQUJBb0lCQUYrd0x4dFRBN2VnWEl4cQppbHREUWt4QXF5NUdxd0s1SC9zNm9xNFZRMkNVYnZrMk5UbmdLR3RKU0xBYUhZbm5jbnpqMGlmSEVsMDQ1eDU4CmRTbGJoUWNvWFdrbUZKVUxVRGt0bG9TTXhxK3IzMSs2eXhTL1BCeUt4eFB1R216a1lGU1k4YXZrMnNnTHNsaVAKRWdkQVdvUGJ3dERxVXI4WXVWenJCNTc5eHc0cWM3OUJTWGVjM1hsVC9tRmtjRzgxa1pqVlNYMWJrMkI1TjdpcwpzSnRwQnJpQ1NDR0s5UDdmN2trdEgzRHZ3aHUxL3AzMjFqUWJkWWlnakdjZE5weEpKVXpyeUdUcXVpK0tQRXRaCjlRQzViWFVVMGo2QWl3WjdrdmVuU1NwY3NvTXVJN3JxT0lKZXV3czV3cndjaGprbVFVdVRqbHFycnB1Z0RnWDcKWlg3TklxRUNnWUVBeU9kQlV6UHpEeDNwUHoyejF3ZFYvdS9CVTdqc1dGTVcvN3JhVW5PMkxnN1dJOFBrQnVSUApOMzUwb0NRKzE2SE1VUVdaOFF1TG9TRHlFbnh6Smp1dmxpazY3SFIvRk5tN3dPbEpHWXlXTGZBY0p2ZG1HSjd0CmIvY3pxK0Jlblc1ajh3c3c4MDVSRzFwRjF1eGdOYWZycS80cVF4cTJFK2o0UFhMY2ZYenV5SE1DZ1lFQThwYzcKZ0tMclhaSlRTOStOcldBS0RGWDlFYnRhSW5NUExEM05FRkpiRHBsYkhraDhDclpnSmw2alp0UnhZWXYzUlR6MApudnBrQVlheS9XS1BnV2hyaFRzVmVLMk1xNGdhOCtLZVVTLzZuT2YwMnRFa3hiRVVPMGsxWHhvSVF3eUdFWWE5Ci9UNkdQSDg1di9NTjF2WklCVlBKSmIyaXFJRmdtckVLSFVFK250MENnWUVBcjl4KyttNUhIYng1S0xyQ2FrQXAKcnZnQXEyRDh3blE1ZGJJQzJwb2ZwMEdsZ2JsQUtpaEFqN3RLSzhTT25nTXI3dUNRV01oYWVibDFMV2x6QXN6TQpidzI0WHJPN2FtME9SVmZ3ZlVUclVWc1Z5YVpXNE1aOTRienFwbEhKZ05YWStDK2JzZCtrYitVZHJYMU0ycXNiClNYczdVM0pXWUNkVzViTmQveHNWaXJFQ2dZQTF2R1EwMFdIYmYwOHVMbDNldXJoZkZTa1NwWEtJMFAzYWFmSWoKbkdxSktGVXp0eENxK3N6L2t0VVZNUmZRYU1Xa002Vm9GY1RUUmJnZVFwZlJMWVVycFBQVG9IWFpoVE9iTkdhbgpTejV6UlRwS3dpc29FMXFNNjJHRUtHc09GeGNYaU1aSzgyK2V0UHZnMWdFSnpkSVVSQVA1ZFRFenJEenU1eXA3CllubHhqUUtCZ0ZiYk1uL1BpTU9OcGlEb1NSMWs4bC8vL0FZMmJBUkd4allFQkZGcnRleFBNTmh2UWsvSUU0ZUcKbkM0S3dMYnMyMllLK3IzU2l6UmR6b0g3VlRxUHN1Um42cmtETUV6REVHTzBMTjlNaldkbWRJNGxCOGZvdVdhaApCU0ZCOW9raGYwdCtHTGk3VElJZEc0RStQN0ViUlE5eVYxNXpQRXVLQTdvQWljdjR6SHB4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRZXlUNVhJRHJSQnEyTG11bE1KMWNaREFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEkxTURNdwpOakUwTWpRME1Wb1hEVEkyTURNd05qRTBNalEwTVZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUw1aFN0cHV1VXhKcFdOUXVSTHAwTzVGd1NKZGhPZ3dSSXlZVHljVFlPR0Fta3YwVEprODJ0RGF3ZjRZS3M2RQpkc2tPY3EwWjJZeENEK2xsaHQ1bWd3VkxxM1NpUVc1VGlrY3IvRWxFSXVuNnRUTzIxK3p1UVk5MUFnSzJ0eS9WClU4bGIrUE1tVWR2Tm1JT1NDUENoYXFFa0JQSzBKVURINUZCOG9acmlxNEZ1MUxnQm10MDZpeFBKdE5mMFI5Z00KcFBRSjlKRkJxclhWU1ExY1loOGt6cDhmYzBIbVVrZHhFK0szU2pKNCtZSkNRTFZ2R3FHUjAvMkYwK2JyUW9iNQp3MTY2RWNONUU2NXduYVl1bThnR1FWM1IxVkx1ZTRMU2xXd3l0YUJqanJDVE53Zzc0QVE5WVpCYmUxQTFCZXFPCkRNcXkyM0xOUW1UdGM3N2hNUGkwQlVjQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSzlzOGVoT05IVVF1K3RrcjJ5MzhrL21TQThSb1loSHhmbFBjamEwdGk5cC9ZM05KcTdrMEdQTm1lOTQKUGlYWFl1SzhnWks4YW15ZXpRVXNzcHEwUlpvNVczM3M3bk1QU2NuZXhEVlUzanFmV0lVd1EwWmxlNk01SS9WRwpUcWVXUVBmYWdVVUd0aXVoTnlXNDZoQVVPdWVjVGtxRk80YWdFM21MeVh3b3FFV3E1Y2drUHNHelNibUpYZnVuCnk1a0cwaFZBM2Nxdmh5NzV1RC9neUJMb2FzOXNqOThRZmVhUE5qTjloWHAzUGczemdoVGdoL2hRME83UUJUdjcKWlo5allTUWFTdXRudXVWSUZXb3pVbGk1MUhTZ3V0VGZUNVlGUGJIN2NqYWZuWWNZSGJaeFJDSm12dDJNS0JFdwpqemlXMVlQVDdCRUJ1MTd6Y3I3b0dad2hvWGM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 2ac681dd145c624965a104e845f62f044bb63aa876ac237f27bc0b71435f9b49
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
